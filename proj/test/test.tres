[gd_resource type="VisualShader" load_steps=48 format=3 uid="uid://btk5kbb7d7rt5"]

[ext_resource type="Script" path="res://shader/uv_utils/mask_vec2_shader_node.gd" id="1_6w3nv"]
[ext_resource type="Script" path="res://shader/in_quad_bezier_segment.gd" id="2_vmtkb"]
[ext_resource type="Script" path="res://shader/quad_bezier_utils/vector_to_angle_shader_node.gd" id="4_hxngp"]
[ext_resource type="Script" path="res://shader/quad_bezier_utils/solutions_to_cases_shader_node.gd" id="4_lh5wj"]
[ext_resource type="Script" path="res://shader/debug_convert_to_quad_bezier_coord_shader_node.gd" id="4_umo4o"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qocbn"]
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("1_6w3nv")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2p0o8"]
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("1_6w3nv")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_m8cy1"]
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("1_6w3nv")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_o74d1"]
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("1_6w3nv")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_pver2"]
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("1_6w3nv")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2013r"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
initialized = true
script = ExtResource("4_hxngp")

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_i3rv1"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_n4yuj"]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeRemap" id="VisualShaderNodeRemap_fra1c"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_1vc6i"]
output_port_for_preview = 0
function = 31

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_e8fb6"]
output_port_for_preview = 0
default_input_values = [0, false, 1, Vector3(1, 1, 1), 2, Vector3(0, 0, 0)]
op_type = 4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_dn7c1"]
constant = 0.05

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_mcjv2"]
function = 1

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_d5yrx"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8xpx7"]
output_port_for_preview = 0
default_input_values = [1, 0.1]
initialized = true
script = ExtResource("2_vmtkb")

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_nokga"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_8vhxt"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_q68rp"]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_2qvcs"]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_uwu4y"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_4u6oq"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_jwn6p"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_xbb5o"]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_0a64l"]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_dcpta"]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_3utlo"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_73gn0"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_b47p5"]
parameter_name = "InitialPoint"
default_value_enabled = true
default_value = Vector2(0.5, 0.25)

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_d6dxn"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nsfny"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_qrqci"]
parameter_name = "ControlPoint"
default_value_enabled = true
default_value = Vector2(0, 0.5)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_e5i6v"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(-0.5, -0.5)]
op_type = 0

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_xhl7p"]
parameter_name = "LastPoint"
default_value_enabled = true
default_value = Vector2(0.5, 0.75)

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_vfd7q"]
default_input_values = [0, Vector2(0, 0)]
initialized = true
script = ExtResource("4_hxngp")

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_hdhsx"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_own7t"]
default_input_values = [0, Vector2(0, 0)]
initialized = true
script = ExtResource("4_hxngp")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_n7jbr"]
default_input_values = [0, Vector2(0, 0)]
initialized = true
script = ExtResource("4_hxngp")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_nq4g3"]
default_input_values = [0, Vector2(0, 0)]
initialized = true
script = ExtResource("4_hxngp")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_3soga"]
default_input_values = [0, 0]
initialized = true
script = ExtResource("4_lh5wj")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0wolm"]
default_input_values = [0, 0]
initialized = true
script = ExtResource("4_lh5wj")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_86jc2"]
output_port_for_preview = 2
default_input_values = [1, Vector2(0, 0), 2, Vector2(0, 1), 3, Vector2(1, 1)]
initialized = true
script = ExtResource("4_umo4o")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_axrcy"]
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("1_6w3nv")

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec2 InitialPoint = vec2(0.500000, 0.250000);
uniform vec2 ControlPoint = vec2(0.000000, 0.500000);
uniform vec2 LastPoint = vec2(0.500000, 0.750000);


// ConvertToQuadBezierCoord_DEBUG
///////////////////////////////////
// Quadratic Bezier Curve Solver //
///////////////////////////////////

// Ref: https://docs.godotengine.org/en/stable/tutorials/shaders/shader_reference/shading_language.html#flow-control
const float QBEZIER_SOLVER_EPSILON = 0.0001;


vec2 qbezier_curve(float t, vec2 p0, vec2 p1, vec2 p2) {
	return p1 + (1.0-t)*(1.0-t)*(p0 - p1) + t*t*(p2-p1);
}


vec2 qbezier_curve_tangent(float t, vec2 p0, vec2 p1, vec2 p2) {
	return -2.0*(1.0-t)*(p0 - p1) + 2.0*t*(p2 - p1); 
}


vec2 qbezier_curve_unit_tangent(float t, vec2 p0, vec2 p1, vec2 p2) {
	vec2 q = qbezier_curve_tangent(t, p0, p1, p2);
	return q / length(q);
}


vec2 qbezier_curve_unit_normal(float t, vec2 p0, vec2 p1, vec2 p2) {
	vec2 q = qbezier_curve_unit_tangent(t, p0, p1, p2);
	return vec2(q.y, -q.x);
}


float qbezier_calc_displacement(vec2 uv, float t, vec2 p0, vec2 p1, vec2 p2) {
	return dot(uv - qbezier_curve(t, p0, p1, p2), 
				qbezier_curve_unit_normal(t, p0, p1, p2));
}


float qbezier_calc_curve_length_integral(float t, float A, float B, float C) {
	float K = 2.0*A*t + B;
	float L = t*(A*t+B) + C;
	float M = pow(B, 2.0) - 4.0*A*C;
	
	float I = K*sqrt(L)/A;
	float J = 0.5 * (M*log(2.0*sqrt(A)*sqrt(L)+K))/pow(A, 1.5);
	
	return I - J;
}


float qbezier_calc_curve_length(float t, vec2 p0, vec2 p1, vec2 p2) {
	
	float a = pow(length(p2-p1), 2.0);
	float b = pow(length(p0-p1), 2.0);
	float c = dot(p2-p1, p0-p1);
	
	float A = a + b + 2.0*c;
	float B = -2.0*(b + c);
	float C = b;
	
	if (abs(A) <= QBEZIER_SOLVER_EPSILON) {
		
		if (abs(B) <= QBEZIER_SOLVER_EPSILON) {
			// \\int_0^t C dt
			return sqrt(C) * t;
		}

		// \\int_0^t {Bt + C} dt
		float It = 2.0 * pow(sqrt(B*t + C), 3.0) / (3.0 * B);
		float I0 = 2.0 * pow(sqrt(C), 3.0) / (3.0 * B);
		
		return It - I0;
	}
	
	// \\int_0^t {At^2 + Bt + C} dt
	return qbezier_calc_curve_length_integral(t, A, B, C) 
			- qbezier_calc_curve_length_integral(0.0, A, B, C);
}


float qbezier_calc_curt(float x) { // cubic root
	return pow(x, 1.0/3.0);
}


void qbezier_get_possible_location_parameters(vec2 uv, vec2 p0, vec2 p1, vec2 p2, out float disc, out float[3] t_arr, out int real_solutions) {

	float a = pow(length(p2-p1), 2.0);
	float b = pow(length(p0-p1), 2.0);
	float c = dot(p2-p1, p0-p1);
	float d = dot(uv-p1, p0-p1);
	float e = dot(uv-p1, p2-p1);
	
	float A = a + b + 2.0*c;
	float B = -3.0*(b + c);
	float C = 3.0*b + c - d - e;
	float D = - b + d;
	
	
	if (abs(A) <= QBEZIER_SOLVER_EPSILON) {
		
		if (abs(B) <= QBEZIER_SOLVER_EPSILON) {
			// Ct + D = 0
			disc = 0.0;
			t_arr[0] = -D/C;
			
			//if (abs(C) <= QBEZIER_SOLVER_EPSILON) {
				//t_arr[0] = 0.0; // or undefined
			//}
			//else {
				//t_arr[0] = -D/C;
			//}
			
			real_solutions = 1;
			return;
		}
		else {
			// Bt^2 + Ct + D = 0
			disc = pow(C,2.0) - 4.0*B*D;
			
			if (abs(disc) <= QBEZIER_SOLVER_EPSILON) {
				// one real solution
				t_arr[0] = -C/(2.0*B);
				
				real_solutions = 1;
				return;
			}
			
			if (disc > 0.0) {
				if (B > 0.0) {
					t_arr[0] = (-C - sqrt(disc))/(2.0*B);
					t_arr[1] = (-C + sqrt(disc))/(2.0*B);
				}
				else {
					t_arr[0] = (-C + sqrt(disc))/(2.0*B);
					t_arr[1] = (-C - sqrt(disc))/(2.0*B);
				}
				
				real_solutions = 2;
				return;
			}
			else {
				// non real solution
				real_solutions = 0;
				return;
			}
		}
	}
	
	// At^3 + Bt^2 + Ct + D
	float Ba = B / A;
	float Ca = C / A;
	float Da = D / A;
	
	// x^3 + px + q = 0, t = x - Ba/3
	float p = (-pow(Ba, 2.0) + 3.0*Ca) / 3.0;
	float q = (2.0*pow(Ba, 3.0) - 9.0*Ba*Ca + 27.0*Da) / 27.0;
	
	disc = -1.0*( 4.0 * pow(p, 3.0) + 27.0 * pow(q, 2.0) );
	
	if (abs(p) < QBEZIER_SOLVER_EPSILON) {
		// one real solution
			
		if (abs(q) < QBEZIER_SOLVER_EPSILON) {
			t_arr[0] = - Ba/3.0;
		}
		else if (q > 0.0) {
			t_arr[0] = -qbezier_calc_curt(q) - Ba/3.0;
		}
		else {
			t_arr[0] = qbezier_calc_curt(-q) - Ba/3.0;
		}
		
		//t_arr[0] = 0.0;
		
		real_solutions = 1;
		return;
	}
	
	if (disc <= 0.0) { 
		// one real solution
		
		if (p > 0.0) {
			
			float th;
			
			//th = 1.0/3.0 * asinh(3.0*q/(2.0*p)*sqrt(3.0/p));
			
			float y = 3.0*q/(2.0*p)*sqrt(3.0/p);
			float ash = sign(y) * acosh(sqrt(1.0 + pow(y,2.0))); 
			th = 1.0/3.0 * ash;
			
			float x = -2.0 * sqrt(p/3.0) * sinh(th);
			t_arr[0] = x - Ba/3.0;
		}
		else { 
			float th = 1.0/3.0 * acosh(-3.0*abs(q)/(2.0*p)*sqrt(-3.0/p));
			float x = -2.0 * abs(q)/q*sqrt(-p/3.0) * cosh(th);
			t_arr[0] = x - Ba/3.0;
		}
		
		//t_arr[0] = 0.0;
		
		real_solutions = 1;
		return;
	}
	else { 
		// three real solutions
		
		float w = 3.0*q/(2.0*p)*sqrt(3.0/-p);
		
		float th = 1.0/3.0*acos(w);
		float th_0 = th;
		float th_1 = th - TAU/3.0;
		float th_2 = th - 2.0*TAU/3.0;
		
		float cos_0 = cos(th_0);
		float cos_1 = cos(th_1);
		float cos_2 = cos(th_2);
		
		float f = -Ba/3.0;
		float g = 2.0*sqrt(-p/3.0);
		
		if (cos_0 <= min(cos_1, cos_2)) {
			t_arr[0] = f + g*cos_0;
			if (cos_1 <= cos_2) {
				t_arr[1] = f + g*cos_1;
				t_arr[2] = f + g*cos_2;
			}
			else {
				t_arr[1] = f + g*cos_2;
				t_arr[2] = f + g*cos_1;
			}
		}
		
		if (cos_1 <= min(cos_0, cos_2)) {
			t_arr[0] = f + g*cos_1;
			if (cos_0 <= cos_2) {
				t_arr[1] = f + g*cos_0;
				t_arr[2] = f + g*cos_2;
			}
			else {
				t_arr[1] = f + g*cos_2;
				t_arr[2] = f + g*cos_0;
			}
		}
		
		if (cos_2 <= min(cos_0, cos_1)) {
			t_arr[0] = f + g*cos_2;
			if (cos_0 <= cos_1) {
				t_arr[1] = f + g*cos_0;
				t_arr[2] = f + g*cos_1;
			}
			else {
				t_arr[1] = f + g*cos_1;
				t_arr[2] = f + g*cos_0;
			}
		}
		
		//t_0 = -Ba/3.0 + 2.0*sqrt(-p/3.0)*cos(th_0);
		//t_1 = -Ba/3.0 + 2.0*sqrt(-p/3.0)*cos(th_1);
		//t_2 = -Ba/3.0 + 2.0*sqrt(-p/3.0)*cos(th_2);
		
		real_solutions = 3;
		return;
	}
}


vec2 qbezier_get_coord(vec2 uv, vec2 p_init, vec2 p_control, vec2 p_last, 
						out vec2 raw_coord0, out vec2 raw_coord1, out vec2 raw_coord2,
						out int real_solutions) {
	
	float disc;
	float t_arr[3];
	
	qbezier_get_possible_location_parameters(uv, p_init, p_control, p_last, disc, t_arr, real_solutions);
	
	float displacement_arr[3];
	float minimum_distance = -1.0;
	int minimum_distance_index = -1;
	
	for (int i = 0; i < real_solutions; i++) {
		displacement_arr[i] = qbezier_calc_displacement(uv, t_arr[i], p_init, p_control, p_last);

		float distance_i = abs(displacement_arr[i]);
		
		if (distance_i <= minimum_distance || minimum_distance < 0.0) {
			if(abs(distance_i - minimum_distance) > QBEZIER_SOLVER_EPSILON) {
				minimum_distance = distance_i;
				minimum_distance_index = i;
			}
		}
	}
	
	raw_coord0 = vec2(t_arr[0], displacement_arr[0]);
	raw_coord1 = vec2(t_arr[1], displacement_arr[1]);
	raw_coord2 = vec2(t_arr[2], displacement_arr[2]);
	
	float location = t_arr[minimum_distance_index];
	float displacement = displacement_arr[minimum_distance_index];
	
	return vec2(location, displacement);
}


vec2 qbezier_get_principal_coord(vec2 uv, vec2 p_init, vec2 p_control, vec2 p_last) {
	
	vec2 raw_coord0;
	vec2 raw_coord1;
	vec2 raw_coord2;
	int real_solutions;
	
	return qbezier_get_coord(uv, p_init, p_control, p_last, 
						raw_coord0, raw_coord1, raw_coord2, real_solutions);
	
}


void fragment() {
// Vector2Parameter:6
	vec2 n_out6p0 = InitialPoint;


// Vector2Parameter:7
	vec2 n_out7p0 = ControlPoint;


// Vector2Parameter:8
	vec2 n_out8p0 = LastPoint;


	vec2 n_out98p0;
	vec2 n_out98p1;
	vec2 n_out98p2;
	float n_out98p3;
	vec2 n_out98p4;
	vec2 n_out98p5;
	vec2 n_out98p6;
	vec2 n_out98p7;
	vec2 n_out98p8;
	vec2 n_out98p9;
	int n_out98p10;
// ConvertToQuadBezierCoord_DEBUG:98
	{
		
			n_out98p0 
				= qbezier_get_coord(UV, n_out6p0, n_out7p0, n_out8p0, 
									n_out98p4, n_out98p5, n_out98p6,
									n_out98p10);
									
			n_out98p1 = qbezier_curve_unit_normal(n_out98p0.x, n_out6p0, n_out7p0, n_out8p0);
			n_out98p2 = qbezier_curve(n_out98p0.x, n_out6p0, n_out7p0, n_out8p0);
			
			n_out98p7 = qbezier_curve_unit_normal(n_out98p4.x, n_out6p0, n_out7p0, n_out8p0);
			n_out98p8 = qbezier_curve_unit_normal(n_out98p5.x, n_out6p0, n_out7p0, n_out8p0);
			n_out98p9 = qbezier_curve_unit_normal(n_out98p6.x, n_out6p0, n_out7p0, n_out8p0);
			
			n_out98p3 
				= qbezier_calc_curve_length(1.0, n_out6p0, n_out7p0, n_out8p0);
	}


// FloatConstant:20
	float n_out20p0 = 0.050000;


	bool n_out26p0;
// InQuadBezierSegment:26
	{
		
			float t = n_out98p0.x;
			float displacement = n_out98p0.y;
			n_out26p0 = (t >= 0.0 && t <= 1.0) && (abs(displacement) <= n_out20p0);
	}


// VectorDecompose:3
	float n_out3p0 = n_out98p0.x;
	float n_out3p1 = n_out98p0.y;


// VectorCompose:22
	float n_in22p1 = 1.00000;
	float n_in22p2 = 1.00000;
	vec3 n_out22p0 = vec3(n_out3p0, n_in22p1, n_in22p2);


	vec3 n_out21p0;
// ColorFunc:21
	{
		vec3 c = n_out22p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out21p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}


	vec3 n_out18p0;
// Switch:18
	vec3 n_in18p2 = vec3(0.00000, 0.00000, 0.00000);
	n_out18p0 = mix(n_in18p2, n_out21p0, float(n_out26p0));


// FloatFunc:31
	float n_out31p0 = abs(n_out3p1);


	float n_out109p0;
// Remap:109
	float n_in109p1 = 0.00000;
	float n_in109p2 = 1.00000;
	float n_in109p3 = 0.00000;
	float n_in109p4 = 1.00000;
	{
		float __input_range = n_in109p2 - n_in109p1;
		float __output_range = n_in109p4 - n_in109p3;
		n_out109p0 = n_in109p3 + __output_range * ((n_out31p0 - n_in109p1) / __input_range);
	}


// FloatFunc:110
	float n_out110p0 = 1.0 - n_out109p0;


	float n_out105p0;
	vec3 n_out105p1;
// VectorToAngle:105
	{
		
			n_out105p0 = atan(n_out98p1.y, n_out98p1.x);
			n_out105p1 = vec3(n_out105p0/TAU + 0.5, 1.0, 1.0);
	}


	vec3 n_out106p0;
// ColorFunc:106
	{
		vec3 c = n_out105p1;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out106p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}


// VectorOp:107
	vec3 n_out107p0 = vec3(n_out110p0) * n_out106p0;


// ColorOp:29
	vec3 n_out29p0 = vec3(1.0) - (vec3(1.0) - n_out18p0) * (vec3(1.0) - n_out107p0);


// Output:0
	COLOR.rgb = n_out29p0;


}
"
graph_offset = Vector2(-503.174, -947.994)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1660, -1580)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorDecompose_8vhxt")
nodes/fragment/3/position = Vector2(-580, -1220)
nodes/fragment/6/node = SubResource("VisualShaderNodeVec2Parameter_b47p5")
nodes/fragment/6/position = Vector2(-1640, -520)
nodes/fragment/7/node = SubResource("VisualShaderNodeVec2Parameter_qrqci")
nodes/fragment/7/position = Vector2(-1640, -300)
nodes/fragment/8/node = SubResource("VisualShaderNodeVec2Parameter_xhl7p")
nodes/fragment/8/position = Vector2(-1640, -80)
nodes/fragment/18/node = SubResource("VisualShaderNodeSwitch_e8fb6")
nodes/fragment/18/position = Vector2(360, -1600)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatConstant_dn7c1")
nodes/fragment/20/position = Vector2(-900, -1720)
nodes/fragment/21/node = SubResource("VisualShaderNodeColorFunc_mcjv2")
nodes/fragment/21/position = Vector2(-60, -1460)
nodes/fragment/22/node = SubResource("VisualShaderNodeVectorCompose_d5yrx")
nodes/fragment/22/position = Vector2(-220, -1460)
nodes/fragment/26/node = SubResource("VisualShaderNodeCustom_8xpx7")
nodes/fragment/26/position = Vector2(-620, -1740)
nodes/fragment/29/node = SubResource("VisualShaderNodeColorOp_nokga")
nodes/fragment/29/position = Vector2(1340, -1460)
nodes/fragment/31/node = SubResource("VisualShaderNodeFloatFunc_q68rp")
nodes/fragment/31/position = Vector2(180, -1100)
nodes/fragment/32/node = SubResource("VisualShaderNodeCompare_2qvcs")
nodes/fragment/32/position = Vector2(-60, -980)
nodes/fragment/34/node = SubResource("VisualShaderNodeVectorDecompose_uwu4y")
nodes/fragment/34/position = Vector2(300, 20)
nodes/fragment/35/node = SubResource("VisualShaderNodeVectorDecompose_4u6oq")
nodes/fragment/35/position = Vector2(300, 300)
nodes/fragment/36/node = SubResource("VisualShaderNodeVectorDecompose_jwn6p")
nodes/fragment/36/position = Vector2(300, 580)
nodes/fragment/37/node = SubResource("VisualShaderNodeCompare_xbb5o")
nodes/fragment/37/position = Vector2(560, -100)
nodes/fragment/38/node = SubResource("VisualShaderNodeCompare_0a64l")
nodes/fragment/38/position = Vector2(560, 220)
nodes/fragment/39/node = SubResource("VisualShaderNodeCompare_dcpta")
nodes/fragment/39/position = Vector2(560, 540)
nodes/fragment/50/node = SubResource("VisualShaderNodeColorFunc_3utlo")
nodes/fragment/50/position = Vector2(560, 1020)
nodes/fragment/56/node = SubResource("VisualShaderNodeColorFunc_73gn0")
nodes/fragment/56/position = Vector2(560, 1260)
nodes/fragment/63/node = SubResource("VisualShaderNodeColorFunc_d6dxn")
nodes/fragment/63/position = Vector2(560, 1500)
nodes/fragment/69/node = SubResource("VisualShaderNodeInput_nsfny")
nodes/fragment/69/position = Vector2(-340, 1720)
nodes/fragment/70/node = SubResource("VisualShaderNodeVectorOp_e5i6v")
nodes/fragment/70/position = Vector2(40, 1660)
nodes/fragment/90/node = SubResource("VisualShaderNodeCustom_vfd7q")
nodes/fragment/90/position = Vector2(260, 1780)
nodes/fragment/91/node = SubResource("VisualShaderNodeColorFunc_hdhsx")
nodes/fragment/91/position = Vector2(560, 1800)
nodes/fragment/92/node = SubResource("VisualShaderNodeCustom_own7t")
nodes/fragment/92/position = Vector2(260, 1280)
nodes/fragment/93/node = SubResource("VisualShaderNodeCustom_n7jbr")
nodes/fragment/93/position = Vector2(260, 1100)
nodes/fragment/94/node = SubResource("VisualShaderNodeCustom_nq4g3")
nodes/fragment/94/position = Vector2(260, 1460)
nodes/fragment/95/node = SubResource("VisualShaderNodeCustom_3soga")
nodes/fragment/95/position = Vector2(-400, 480)
nodes/fragment/97/node = SubResource("VisualShaderNodeCustom_0wolm")
nodes/fragment/97/position = Vector2(-580, 1160)
nodes/fragment/98/node = SubResource("VisualShaderNodeCustom_86jc2")
nodes/fragment/98/position = Vector2(-1180, -420)
nodes/fragment/99/node = SubResource("VisualShaderNodeCustom_axrcy")
nodes/fragment/99/position = Vector2(-40, 1100)
nodes/fragment/100/node = SubResource("VisualShaderNodeCustom_qocbn")
nodes/fragment/100/position = Vector2(-40, 1220)
nodes/fragment/101/node = SubResource("VisualShaderNodeCustom_2p0o8")
nodes/fragment/101/position = Vector2(-40, 1340)
nodes/fragment/102/node = SubResource("VisualShaderNodeCustom_m8cy1")
nodes/fragment/102/position = Vector2(-40, 160)
nodes/fragment/103/node = SubResource("VisualShaderNodeCustom_o74d1")
nodes/fragment/103/position = Vector2(-40, 280)
nodes/fragment/104/node = SubResource("VisualShaderNodeCustom_pver2")
nodes/fragment/104/position = Vector2(-40, 400)
nodes/fragment/105/node = SubResource("VisualShaderNodeCustom_2013r")
nodes/fragment/105/position = Vector2(480, -600)
nodes/fragment/106/node = SubResource("VisualShaderNodeColorFunc_i3rv1")
nodes/fragment/106/position = Vector2(840, -640)
nodes/fragment/107/node = SubResource("VisualShaderNodeVectorOp_n4yuj")
nodes/fragment/107/position = Vector2(1080, -1080)
nodes/fragment/109/node = SubResource("VisualShaderNodeRemap_fra1c")
nodes/fragment/109/position = Vector2(447.237, -995.16)
nodes/fragment/110/node = SubResource("VisualShaderNodeFloatFunc_1vc6i")
nodes/fragment/110/position = Vector2(700, -1020)
nodes/fragment/connections = PackedInt32Array(22, 0, 21, 0, 21, 0, 18, 1, 3, 0, 22, 0, 20, 0, 26, 1, 26, 0, 18, 0, 3, 1, 31, 0, 3, 1, 32, 0, 29, 0, 0, 0, 34, 1, 37, 0, 35, 1, 38, 0, 36, 1, 39, 0, 69, 0, 70, 0, 70, 0, 90, 0, 90, 1, 91, 0, 93, 1, 50, 0, 92, 1, 56, 0, 94, 1, 63, 0, 6, 0, 98, 1, 7, 0, 98, 2, 8, 0, 98, 3, 98, 10, 97, 0, 98, 10, 95, 0, 97, 1, 99, 0, 98, 7, 99, 1, 99, 0, 93, 0, 97, 2, 100, 0, 100, 0, 92, 0, 97, 3, 101, 0, 101, 0, 94, 0, 98, 8, 100, 1, 98, 9, 101, 1, 95, 1, 102, 0, 95, 2, 103, 0, 95, 3, 104, 0, 98, 4, 102, 1, 98, 5, 103, 1, 98, 6, 104, 1, 102, 0, 34, 0, 103, 0, 35, 0, 104, 0, 36, 0, 98, 0, 3, 0, 98, 0, 26, 0, 18, 0, 29, 0, 98, 1, 105, 0, 105, 1, 106, 0, 106, 0, 107, 1, 31, 0, 109, 0, 109, 0, 110, 0, 110, 0, 107, 0, 107, 0, 29, 1)
