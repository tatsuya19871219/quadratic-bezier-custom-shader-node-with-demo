[gd_resource type="VisualShader" load_steps=40 format=3 uid="uid://iov8ivcjxyl1"]

[ext_resource type="Script" path="res://shader/bool_utils/within_abs_shader_node.gd" id="1_jx1he"]
[ext_resource type="Script" path="res://shader/convert_to_quad_bezier_coord_shader_node.gd" id="1_ofi4x"]
[ext_resource type="Script" path="res://shader/in_quad_bezier_segment.gd" id="2_fcb7h"]
[ext_resource type="Script" path="res://shader/uv_utils/waved_uv_shader_node.gd" id="2_rqe8y"]
[ext_resource type="Script" path="res://shader/uv_utils/mask_vec2_shader_node.gd" id="3_xxyx0"]

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_gcpu0"]
output_port_for_preview = 0
default_input_values = [0, false, 1, Vector3(1, 1, 1), 2, Vector3(0, 0, 0)]
op_type = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_q3lpt"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_yikx1"]
output_port_for_preview = 0
default_input_values = [1, 0.1]
initialized = true
script = ExtResource("1_jx1he")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_68dbw"]
output_port_for_preview = 0
default_input_values = [1, true, 2, Vector2(5, 3)]
initialized = true
script = ExtResource("2_rqe8y")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_iha4r"]
output_port_for_preview = 0
default_input_values = [0, false, 2, Vector2(0, 0)]
initialized = true
script = ExtResource("3_xxyx0")

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_r21iv"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_mjms8"]
default_input_values = [0, 0.0, 1, 5.0]
operator = 2

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_adqcy"]
default_input_values = [0, true, 1, 1.0, 2, 0.0]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6fnot"]
output_port_for_preview = 0
default_input_values = [1, Vector2(0, 0), 2, Vector2(0, 1), 3, Vector2(1, 1)]
initialized = true
script = ExtResource("1_ofi4x")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_d54ib"]
default_input_values = [0, 0.0, 1, 2.0]
operator = 4

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_gawcr"]
default_input_values = [0, 0, 1, 0, 2, 1e-05]
type = 1

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_l6334"]
function = 31

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_8wn41"]
operator = 3

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_iujll"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_mvj0j"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_wevhe"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_2fhhq"]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_46oix"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_o0b5h"]
default_input_values = [0, 2.0, 1, 0.0]
operator = 2

[sub_resource type="VisualShaderNodeVec2Constant" id="VisualShaderNodeVec2Constant_qab4p"]
constant = Vector2(0, 0.5)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ovu1o"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_la6g7"]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_bu0s2"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_f8oyi"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_56u6s"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_6rjbl"]
function = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_23v7t"]
default_input_values = [0, 0.0, 1, 0.628]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_veqc5"]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_wy6ke"]
output_port_for_preview = 0
function = 17

[sub_resource type="VisualShaderNodeVec2Constant" id="VisualShaderNodeVec2Constant_2ej5k"]
constant = Vector2(0.5, 0)

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_78gyn"]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_l6pin"]
default_input_values = [0, 0.5, 1, 1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeVec2Constant" id="VisualShaderNodeVec2Constant_1ufxl"]
constant = Vector2(1, 0.5)

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_ew1a8"]
output_port_for_preview = 0
default_input_values = [1, 0.1]
initialized = true
script = ExtResource("2_fcb7h")

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;



// ConvertToQuadBezierCoord
//////////////////////////////////////////////////////////////////////////////////////
// Shader include file for Quadratic Bezier Curve Coordinate Converter				//
//																					//
// MIT License																		//
//																					//
// Copyright (c) 2024 Tatsuya Yamada												//
//																					//
// Permission is hereby granted, free of charge, to any person obtaining a copy		//
// of this software and associated documentation files (the \"Software\"), to deal	//
// in the Software without restriction, including without limitation the rights		//
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell		//
// copies of the Software, and to permit persons to whom the Software is			//
// furnished to do so, subject to the following conditions:							//
//																					//
// The above copyright notice and this permission notice shall be included in all	//
// copies or substantial portions of the Software.									//
//																					//
// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR		//
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,			//
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE		//
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER			//
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,	//
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE	//
// SOFTWARE.																		//
//////////////////////////////////////////////////////////////////////////////////////

// Ref: https://docs.godotengine.org/en/stable/tutorials/shaders/shader_reference/shading_language.html#flow-control
const float QBEZIER_SOLVER_EPSILON = 0.0001;

vec2 qbezier_curve(float t, vec2 p0, vec2 p1, vec2 p2) {
	return p1 + (1.0-t)*(1.0-t)*(p0 - p1) + t*t*(p2-p1);
}

vec2 qbezier_curve_tangent(float t, vec2 p0, vec2 p1, vec2 p2) {
	return -2.0*(1.0-t)*(p0 - p1) + 2.0*t*(p2 - p1); 
}

vec2 qbezier_curve_unit_tangent(float t, vec2 p0, vec2 p1, vec2 p2) {
	vec2 q = qbezier_curve_tangent(t, p0, p1, p2);
	return q / length(q);
}

vec2 qbezier_curve_unit_normal(float t, vec2 p0, vec2 p1, vec2 p2) {
	vec2 q = qbezier_curve_unit_tangent(t, p0, p1, p2);
	return vec2(q.y, -q.x);
}

float qbezier_calc_displacement(vec2 uv, float t, vec2 p0, vec2 p1, vec2 p2) {
	return dot(uv - qbezier_curve(t, p0, p1, p2), 
				qbezier_curve_unit_normal(t, p0, p1, p2));
}

float qbezier_calc_curve_length_integral(float t, float A, float B, float C) {
	float K = 2.0*A*t + B;
	float L = t*(A*t+B) + C;
	float M = pow(B, 2.0) - 4.0*A*C;
	
	float I = K*sqrt(L)/A;
	float J = 0.5 * (M*log(2.0*sqrt(A)*sqrt(L)+K))/pow(A, 1.5);
	
	return I - J;
}

float qbezier_calc_curve_length(float t, vec2 p0, vec2 p1, vec2 p2) {
	
	float a = pow(length(p2-p1), 2.0);
	float b = pow(length(p0-p1), 2.0);
	float c = dot(p2-p1, p0-p1);
	
	float A = a + b + 2.0*c;
	float B = -2.0*(b + c);
	float C = b;
	
	if (abs(A) <= QBEZIER_SOLVER_EPSILON) {
		
		if (abs(B) <= QBEZIER_SOLVER_EPSILON) {
			// \\int_0^t C dt
			return sqrt(C) * t;
		}
		
		// \\int_0^t {Bt + C} dt
		float It = 2.0 * pow(sqrt(B*t + C), 3.0) / (3.0 * B);
		float I0 = 2.0 * pow(sqrt(C), 3.0) / (3.0 * B);
		
		return It - I0;
	}
	
	// \\int_0^t {At^2 + Bt + C} dt
	return qbezier_calc_curve_length_integral(t, A, B, C) 
			- qbezier_calc_curve_length_integral(0.0, A, B, C);
}

float qbezier_calc_curt(float x) { // cubic root
	return pow(x, 1.0/3.0);
}

// Returns possible coordinates in ascending order (t_arr[0] < t_arr[1] < t_arr[2])
void qbezier_get_possible_location_parameters(vec2 uv, vec2 p0, vec2 p1, vec2 p2, out float disc, out float[3] t_arr, out int real_solutions) {

	float a = pow(length(p2-p1), 2.0);
	float b = pow(length(p0-p1), 2.0);
	float c = dot(p2-p1, p0-p1);
	float d = dot(uv-p1, p0-p1);
	float e = dot(uv-p1, p2-p1);
	
	float A = a + b + 2.0*c;
	float B = -3.0*(b + c);
	float C = 3.0*b + c - d - e;
	float D = - b + d;
	
	
	if (abs(A) <= QBEZIER_SOLVER_EPSILON) {
		
		if (abs(B) <= QBEZIER_SOLVER_EPSILON) {
			// Ct + D = 0
			disc = 0.0;
			t_arr[0] = -D/C;
			
			//if (abs(C) <= QBEZIER_SOLVER_EPSILON) {
				//t_arr[0] = 0.0; // or undefined
			//}
			//else {
				//t_arr[0] = -D/C;
			//}
			
			real_solutions = 1;
			return;
		}
		else {
			// Bt^2 + Ct + D = 0
			disc = pow(C,2.0) - 4.0*B*D;
			
			if (abs(disc) <= QBEZIER_SOLVER_EPSILON) {
				// one real solution
				t_arr[0] = -C/(2.0*B);
				
				real_solutions = 1;
				return;
			}
			
			if (disc > 0.0) {
				if (B > 0.0) {
					t_arr[0] = (-C - sqrt(disc))/(2.0*B);
					t_arr[1] = (-C + sqrt(disc))/(2.0*B);
				}
				else {
					t_arr[0] = (-C + sqrt(disc))/(2.0*B);
					t_arr[1] = (-C - sqrt(disc))/(2.0*B);
				}
				
				real_solutions = 2;
				return;
			}
			else {
				// non real solution
				real_solutions = 0;
				return;
			}
		}
	}
	
	// At^3 + Bt^2 + Ct + D
	float Ba = B / A;
	float Ca = C / A;
	float Da = D / A;
	
	// x^3 + px + q = 0, t = x - Ba/3
	float p = (-pow(Ba, 2.0) + 3.0*Ca) / 3.0;
	float q = (2.0*pow(Ba, 3.0) - 9.0*Ba*Ca + 27.0*Da) / 27.0;
	
	disc = -1.0*( 4.0 * pow(p, 3.0) + 27.0 * pow(q, 2.0) );
	
	if (abs(p) < QBEZIER_SOLVER_EPSILON) {
		// one real solution
			
		if (abs(q) < QBEZIER_SOLVER_EPSILON) {
			t_arr[0] = - Ba/3.0;
		}
		else if (q > 0.0) {
			t_arr[0] = -qbezier_calc_curt(q) - Ba/3.0;
		}
		else {
			t_arr[0] = qbezier_calc_curt(-q) - Ba/3.0;
		}
		
		real_solutions = 1;
		return;
	}
	
	if (disc <= 0.0) { 
		// one real solution
		
		if (p > 0.0) {
			
			float th;
			
			//th = 1.0/3.0 * asinh(3.0*q/(2.0*p)*sqrt(3.0/p));
			
			float y = 3.0*q/(2.0*p)*sqrt(3.0/p);
			float ash = sign(y) * acosh(sqrt(1.0 + pow(y,2.0))); 
			th = 1.0/3.0 * ash;
			
			float x = -2.0 * sqrt(p/3.0) * sinh(th);
			t_arr[0] = x - Ba/3.0;
		}
		else { 
			float th = 1.0/3.0 * acosh(-3.0*abs(q)/(2.0*p)*sqrt(-3.0/p));
			float x = -2.0 * abs(q)/q*sqrt(-p/3.0) * cosh(th);
			t_arr[0] = x - Ba/3.0;
		}
		
		real_solutions = 1;
		return;
	}
	else { 
		// three real solutions
		
		float w = 3.0*q/(2.0*p)*sqrt(3.0/-p);
		
		float th = 1.0/3.0*acos(w);
		float th_0 = th;
		float th_1 = th - TAU/3.0;
		float th_2 = th - 2.0*TAU/3.0;
		
		float cos_0 = cos(th_0);
		float cos_1 = cos(th_1);
		float cos_2 = cos(th_2);
		
		float f = -Ba/3.0;
		float g = 2.0*sqrt(-p/3.0);
		
		if (cos_0 <= min(cos_1, cos_2)) {
			t_arr[0] = f + g*cos_0;
			if (cos_1 <= cos_2) {
				t_arr[1] = f + g*cos_1;
				t_arr[2] = f + g*cos_2;
			}
			else {
				t_arr[1] = f + g*cos_2;
				t_arr[2] = f + g*cos_1;
			}
		}
		
		if (cos_1 <= min(cos_0, cos_2)) {
			t_arr[0] = f + g*cos_1;
			if (cos_0 <= cos_2) {
				t_arr[1] = f + g*cos_0;
				t_arr[2] = f + g*cos_2;
			}
			else {
				t_arr[1] = f + g*cos_2;
				t_arr[2] = f + g*cos_0;
			}
		}
		
		if (cos_2 <= min(cos_0, cos_1)) {
			t_arr[0] = f + g*cos_2;
			if (cos_0 <= cos_1) {
				t_arr[1] = f + g*cos_0;
				t_arr[2] = f + g*cos_1;
			}
			else {
				t_arr[1] = f + g*cos_1;
				t_arr[2] = f + g*cos_0;
			}
		}
		
		//t_0 = -Ba/3.0 + 2.0*sqrt(-p/3.0)*cos(th_0);
		//t_1 = -Ba/3.0 + 2.0*sqrt(-p/3.0)*cos(th_1);
		//t_2 = -Ba/3.0 + 2.0*sqrt(-p/3.0)*cos(th_2);
		
		real_solutions = 3;
		return;
	}
}

vec2 qbezier_get_coord(vec2 uv, vec2 p_init, vec2 p_control, vec2 p_last, 
						out vec2 raw_coord0, out vec2 raw_coord1, out vec2 raw_coord2,
						out int real_solutions) {
	
	float disc;
	float t_arr[3];
	
	qbezier_get_possible_location_parameters(uv, p_init, p_control, p_last, disc, t_arr, real_solutions);
	
	float displacement_arr[3];
	float minimum_distance = -1.0;
	int minimum_distance_index = -1;
	
	for (int i = 0; i < real_solutions; i++) {
		displacement_arr[i] = qbezier_calc_displacement(uv, t_arr[i], p_init, p_control, p_last);

		float distance_i = abs(displacement_arr[i]);
		
		if (distance_i <= minimum_distance || minimum_distance < 0.0) {
			if(abs(distance_i - minimum_distance) > QBEZIER_SOLVER_EPSILON) {
				minimum_distance = distance_i;
				minimum_distance_index = i;
			}
		}
	}
	
	raw_coord0 = vec2(t_arr[0], displacement_arr[0]);
	raw_coord1 = vec2(t_arr[1], displacement_arr[1]);
	raw_coord2 = vec2(t_arr[2], displacement_arr[2]);
	
	float location = t_arr[minimum_distance_index];
	float displacement = displacement_arr[minimum_distance_index];
	
	return vec2(location, displacement);
}

vec2 qbezier_get_principal_coord(vec2 uv, vec2 p_init, vec2 p_control, vec2 p_last) {
	
	vec2 raw_coord0;
	vec2 raw_coord1;
	vec2 raw_coord2;
	int real_solutions;
	
	return qbezier_get_coord(uv, p_init, p_control, p_last, 
							raw_coord0, raw_coord1, raw_coord2, real_solutions);
	
}


void fragment() {
// Input:40
	float n_out40p0 = TIME;


// FloatOp:47
	float n_in47p1 = 0.62800;
	float n_out47p0 = n_out40p0 * n_in47p1;


// FloatFunc:46
	float n_out46p0 = sin(n_out47p0);


// Input:44
	vec2 n_out44p0 = UV;


// VectorDecompose:45
	float n_out45p0 = n_out44p0.x;
	float n_out45p1 = n_out44p0.y;


// FloatOp:43
	float n_out43p0 = n_out46p0 + n_out45p0;


// VectorCompose:42
	vec2 n_out42p0 = vec2(n_out43p0, n_out45p1);


	vec2 n_out23p0;
	vec2 n_out23p1;
// WavedUV:23
	bool n_in23p1 = true;
	vec2 n_in23p2 = vec2(5.00000, 3.00000);
	{
		
			vec2 uv2 = n_out42p0 * n_in23p2;
			
			vec2 ij = floor(uv2);
			vec2 st = fract(uv2);
			
			float x = st.x;
			float y = int(ij.x) % 2 == 0 ? st.y : 1.0 - st.y;
			if (n_in23p1 && int(ij.y) % 2 == 1) {
				y = 1.0 - y;
			}
			
			n_out23p0 = vec2(x, y);
			n_out23p1 = ij;
			
	}


// Vector2Constant:4
	vec2 n_out4p0 = vec2(0.000000, 0.500000);


// Vector2Constant:5
	vec2 n_out5p0 = vec2(0.500000, 0.000000);


// Vector2Constant:6
	vec2 n_out6p0 = vec2(1.000000, 0.500000);


	vec2 n_out3p0;
	vec2 n_out3p1;
	vec2 n_out3p2;
	float n_out3p3;
// ConvertToQuadBezierCoord:3
	{
		
			
			n_out3p0 
				= qbezier_get_principal_coord(n_out23p0, n_out4p0, n_out5p0, n_out6p0);
									
			n_out3p1 = qbezier_curve_unit_normal(n_out3p0.x, n_out4p0, n_out5p0, n_out6p0);
			n_out3p2 = qbezier_curve(n_out3p0.x, n_out4p0, n_out5p0, n_out6p0);
			
			n_out3p3 
				= qbezier_calc_curve_length(1.0, n_out4p0, n_out5p0, n_out6p0);
	}


// VectorDecompose:21
	float n_out21p0 = n_out3p0.x;
	float n_out21p1 = n_out3p0.y;


// FloatFunc:32
	float n_out32p0 = 1.0 - n_out21p0;


	float n_out29p0;
// Switch:29
	bool n_in29p0 = true;
	n_out29p0 = mix(n_out32p0, n_out21p0, float(n_in29p0));


// VectorDecompose:25
	float n_out25p0 = n_out23p1.x;
	float n_out25p1 = n_out23p1.y;


// FloatOp:38
	float n_out38p0 = n_out29p0 + n_out25p0;


// FloatOp:39
	float n_in39p0 = 2.00000;
	float n_out39p0 = n_in39p0 * n_out40p0;


// MultiplyAdd:36
	float n_out36p0 = (n_out38p0 * n_out3p3) + n_out39p0;


// FloatOp:27
	float n_in27p1 = 5.00000;
	float n_out27p0 = n_out3p3 * n_in27p1;


// FloatOp:33
	float n_out33p0 = n_out36p0 / n_out27p0;


// FloatFunc:49
	float n_out49p0 = fract(n_out33p0);


// VectorCompose:51
	float n_in51p0 = 0.50000;
	float n_in51p2 = 1.00000;
	vec3 n_out51p0 = vec3(n_in51p0, n_out49p0, n_in51p2);


	vec3 n_out50p0;
// ColorFunc:50
	{
		vec3 c = n_out51p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out50p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}


// Output:0
	COLOR.rgb = n_out50p0;


}
"
graph_offset = Vector2(-373.669, -617.936)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(2740, -240)
nodes/fragment/3/node = SubResource("VisualShaderNodeCustom_6fnot")
nodes/fragment/3/position = Vector2(500, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeVec2Constant_qab4p")
nodes/fragment/4/position = Vector2(120, 440)
nodes/fragment/5/node = SubResource("VisualShaderNodeVec2Constant_2ej5k")
nodes/fragment/5/position = Vector2(120, 560)
nodes/fragment/6/node = SubResource("VisualShaderNodeVec2Constant_1ufxl")
nodes/fragment/6/position = Vector2(120, 680)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_ew1a8")
nodes/fragment/7/position = Vector2(1460, 440)
nodes/fragment/20/node = SubResource("VisualShaderNodeSwitch_gcpu0")
nodes/fragment/20/position = Vector2(1940, -200)
nodes/fragment/21/node = SubResource("VisualShaderNodeVectorDecompose_q3lpt")
nodes/fragment/21/position = Vector2(560, -260)
nodes/fragment/22/node = SubResource("VisualShaderNodeCustom_yikx1")
nodes/fragment/22/position = Vector2(1480, -200)
nodes/fragment/23/node = SubResource("VisualShaderNodeCustom_68dbw")
nodes/fragment/23/position = Vector2(80, 40)
nodes/fragment/24/node = SubResource("VisualShaderNodeCustom_iha4r")
nodes/fragment/24/position = Vector2(1720, 220)
nodes/fragment/25/node = SubResource("VisualShaderNodeVectorDecompose_r21iv")
nodes/fragment/25/position = Vector2(240, -540)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatOp_mjms8")
nodes/fragment/27/position = Vector2(1080, 20)
nodes/fragment/29/node = SubResource("VisualShaderNodeSwitch_adqcy")
nodes/fragment/29/position = Vector2(880, -1000)
nodes/fragment/30/node = SubResource("VisualShaderNodeFloatOp_d54ib")
nodes/fragment/30/position = Vector2(540, -960)
nodes/fragment/31/node = SubResource("VisualShaderNodeCompare_gawcr")
nodes/fragment/31/position = Vector2(700, -960)
nodes/fragment/32/node = SubResource("VisualShaderNodeFloatFunc_l6334")
nodes/fragment/32/position = Vector2(800, -320)
nodes/fragment/33/node = SubResource("VisualShaderNodeFloatOp_8wn41")
nodes/fragment/33/position = Vector2(1580, -840)
nodes/fragment/34/node = SubResource("VisualShaderNodeVectorCompose_iujll")
nodes/fragment/34/position = Vector2(1820, -760)
nodes/fragment/35/node = SubResource("VisualShaderNodeColorFunc_mvj0j")
nodes/fragment/35/position = Vector2(2020, -700)
nodes/fragment/36/node = SubResource("VisualShaderNodeMultiplyAdd_wevhe")
nodes/fragment/36/position = Vector2(1400, -880)
nodes/fragment/37/node = SubResource("VisualShaderNodeFloatOp_2fhhq")
nodes/fragment/37/position = Vector2(1180, -580)
nodes/fragment/38/node = SubResource("VisualShaderNodeFloatOp_46oix")
nodes/fragment/38/position = Vector2(1180, -1000)
nodes/fragment/39/node = SubResource("VisualShaderNodeFloatOp_o0b5h")
nodes/fragment/39/position = Vector2(1080, -1320)
nodes/fragment/40/node = SubResource("VisualShaderNodeInput_ovu1o")
nodes/fragment/40/position = Vector2(-480, -1280)
nodes/fragment/42/node = SubResource("VisualShaderNodeVectorCompose_la6g7")
nodes/fragment/42/position = Vector2(-140, -480)
nodes/fragment/43/node = SubResource("VisualShaderNodeFloatOp_bu0s2")
nodes/fragment/43/position = Vector2(-420, -580)
nodes/fragment/44/node = SubResource("VisualShaderNodeInput_f8oyi")
nodes/fragment/44/position = Vector2(-840, -400)
nodes/fragment/45/node = SubResource("VisualShaderNodeVectorDecompose_56u6s")
nodes/fragment/45/position = Vector2(-472.125, -351.913)
nodes/fragment/46/node = SubResource("VisualShaderNodeFloatFunc_6rjbl")
nodes/fragment/46/position = Vector2(-200, -940)
nodes/fragment/47/node = SubResource("VisualShaderNodeFloatOp_23v7t")
nodes/fragment/47/position = Vector2(-240, -1100)
nodes/fragment/48/node = SubResource("VisualShaderNodeFloatOp_veqc5")
nodes/fragment/48/position = Vector2(1620, -1300)
nodes/fragment/49/node = SubResource("VisualShaderNodeFloatFunc_wy6ke")
nodes/fragment/49/position = Vector2(1920, -1160)
nodes/fragment/50/node = SubResource("VisualShaderNodeColorFunc_78gyn")
nodes/fragment/50/position = Vector2(2420, -960)
nodes/fragment/51/node = SubResource("VisualShaderNodeVectorCompose_l6pin")
nodes/fragment/51/position = Vector2(2220, -1020)
nodes/fragment/connections = PackedInt32Array(4, 0, 3, 1, 5, 0, 3, 2, 6, 0, 3, 3, 3, 0, 7, 0, 3, 0, 21, 0, 21, 1, 22, 0, 23, 0, 3, 0, 22, 0, 20, 0, 22, 0, 24, 0, 3, 0, 24, 1, 23, 1, 25, 0, 3, 3, 27, 0, 30, 0, 31, 0, 25, 0, 30, 0, 21, 0, 29, 1, 21, 0, 32, 0, 32, 0, 29, 2, 27, 0, 33, 1, 33, 0, 34, 0, 34, 0, 35, 0, 3, 3, 36, 1, 36, 0, 33, 0, 29, 0, 37, 0, 3, 3, 37, 1, 29, 0, 38, 0, 25, 0, 38, 1, 38, 0, 36, 0, 39, 0, 36, 2, 40, 0, 39, 1, 44, 0, 45, 0, 45, 0, 43, 1, 45, 1, 42, 1, 43, 0, 42, 0, 42, 0, 23, 0, 46, 0, 43, 0, 40, 0, 47, 0, 47, 0, 46, 0, 36, 0, 48, 0, 27, 0, 48, 1, 33, 0, 49, 0, 51, 0, 50, 0, 49, 0, 51, 1, 50, 0, 0, 0)
